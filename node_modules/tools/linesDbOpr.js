
var mongoose = require('mongoose');

var BusAuthSchema = mongoose.Schema({
        ownerid : {type : String, default : ''},
        name : {type: String,default :''},
        lver : {type: Number,default :0}, //line version
        desc : {type: String,default :''}, //line description
        local:{
            city:{type: String,default :''},
            area:{type: String,default :''},
            adesc:{type: String,default :''},//area description, eg shangh/pudong
        },//sub json {city:shanghai,area:pudong}
        watcher:[Number],//user id list
        stations:[{ stname:{type: String,default :''},
                    lo: {type : Number},
                    la: {type : Number},
                }],
});


var MongOpr=require("memod/mongooseOpr");


function AuthDbOpr(dbname,modelSchema,modelName){
    MongOpr.call(this,dbname,modelSchema,modelName);//call the super class construct,note:add this 
}
var ut=require('util');
ut.inherits(AuthDbOpr,MongOpr);

AuthDbOpr.prototype.querryTodayAdd=function(cb){
    var today=new Date();
    var ts=today.getFullYear()+"-"+(today.getMonth()+1)+"-"+today.getDate(); 
    mo.getAll({name:{"$gte":new Date(ts)}},'',function(err,docs){
    });
}

AuthDbOpr.prototype.getLocal=function(localDesc){
    var lc={};
    if(localDesc.indexOf("区")!=-1){
        lc.adesc=localDesc.substring(0,localDesc.indexOf("区")+1);
    }
    console.log("AuthDbOpr.getLocal("+localDesc+")=",lc);
    return lc;
}

AuthDbOpr.prototype.updateline=function(msg,ws){
    this.getOne({_id:msg.lineid},'',function(e,d){
        if(d){
            if(d.lver!=msg.lver){
                var resp={"type":"re-updateline","res":"ok","name":d.name,"ownerid":d.ownerid,"stations":d.stations,"lineid":d._id,"area":d.local.adesc,"lver":d.lver,"desc":d.desc}
                ws.send(JSON.stringify(resp));
            }else{
                ws.send(JSON.stringify({"type":"re-updateline","res":"nochange"}));
            }
        }else{
            ws.send(JSON.stringify({"type":"re-updateline","res":"noline"}));
        }
    });
}

AuthDbOpr.prototype.querryline=function(qmsg,ws){
    function sendLines(docs,ws){
        var resp={"type":"re-getlines"};
        var res=new Array();
        resp.res=res;
        if(!docs){
            ws.send(JSON.stringify(resp));
            return;
        }
        for(var i=0;i<docs.length;i++){
            d=docs[i];
            console.log("getlines["+i+"]=",d.name);
            res.push({"name":d.name,"ownerid":d.ownerid,"stations":d.stations,"lineid":d._id,"area":d.local.adesc,"lver":d.lver,"desc":d.desc})
        }
        ws.send(JSON.stringify(resp));
    }
    var q={};
    if(qmsg.qtype=='byname'){
        q['name']=new RegExp(qmsg.val);
        this.getAll(q,'',function(err,docs){
            sendLines(docs,ws);
        });
    }else{
        sendLines(null,ws);
    }
}

var mo = new AuthDbOpr("busLineDb",BusAuthSchema,"BusLine");
mo.init();
module.exports = mo;

//tb();

function tb(){
    var k='run';
    var q={};
    q['name']=new RegExp(k);
    mo.getAll(q,'',function(err,docs){
        console.log("tb err="+err);
        for(var i in docs){
            console.log("docs["+i+"]="+docs[i].name);
        }
    });
}
function tA(){
    var mo=new MongOpr("tst",AppAuth);
    mo.init();
    mo.add({mobinfo:"name1"});
    mo.getOne({mobinfo:"name1"},'',function(err,doc){
        for(k in doc){
        }
        console.log('ok,name='+doc.mobinfo+",skill="+doc.authtype+",id="+doc.id+",_id="+doc._id);
    });
    mo.getAt(1000,function(err,doc){
        if(doc){
            console.log('ok,getAt='+doc.mobinfo+",skill="+doc.authtype+",id="+doc.id+",_id="+doc._id);
        }else{
            console.log("err,getAt no doc at such index")
        }
    });

    mo.count({mobinfo:"name1"},function(err,cnt){
        console.log("cnt="+cnt);
    });
}


