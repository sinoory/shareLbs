//TODO: use memery only,not disk db
var mongoose = require('mongoose');

var BusAuthSchema = mongoose.Schema({
        ownerid : {type : String, default : ''},
        lineid : {type : String, default : ''},
        linestatus : {type: String,default :'stoped'}, // running | stoped
        watchers:[Number],//user id list
        ststatus:[{ status:{type: String,default :'next'}, //station status : passed|in|next
                   leavetm: {type : Number,default : 0}, //leave time
                    speed: {type : Number,default : 0},
                    dist: {type : Number,default : 0}, //distance
                }],
});


var MongOpr=require("memod/mongooseOpr");


function AuthDbOpr(dbname,modelSchema,modelName){
    MongOpr.call(this,dbname,modelSchema,modelName);//call the super class construct,note:add this 
}
var ut=require('util');
ut.inherits(AuthDbOpr,MongOpr);
//add other method bellow
AuthDbOpr.prototype.start=function(line,startIndex){
    line.linestatus="running";
    for(var i=0;i<line.ststatus.length;i++){
        line.ststatus.status=i<startIndex?'passed':'next';
    }
    line.save();
}

AuthDbOpr.prototype.addnew=function(msg){
    //busOnLineOpr.addnew({"lineid":msg.lineid,"linestatus":"running"},null);
    var d={"lineid":msg.lineid,"linestatus":msg.linestatus};
    var sts=new Array();
    for(var i=0;i<msg.stationCnt;i++){
        sts.push({status:(i==msg.startInd)?"in":(i<msg.startInd?"passed":"next")});
    }
    d.ststatus=sts;
    mo.add(d,function(err,res){
        //console.log("finish add,e="+err+",res=",res);
    });
}

AuthDbOpr.prototype.stationUpdate=function(msg,onlineUsers){
    mo.getOne({lineid:msg.lineid},function(err,line){
        //console.log("stationUpdate line=",line);
        line.ststatus[msg.index].status=msg.status;
        line.ststatus[msg.index].speed=msg.speed;
        line.ststatus[msg.index].dist=msg.dist;
        line.save();
        mo.notifyBusUsers(onlineUsers,line,msg);
    });
}

AuthDbOpr.prototype.notifyBusUsers=function(onlineUsers,line,jsmsg){
    for(var i=0;i<line.watchers.length;i++){
        if(line.watchers[i] in onlineUsers){
            onlineUsers[line.watchers[i]].ws.send(JSON.stringify(jsmsg));
        }
    }
}


AuthDbOpr.prototype.notifyStart=function(onlineUsers,line){
    for(var i=0;i<line.watchers.length;i++){
        if(line.watchers[i] in onlineUsers){
            onlineUsers[line.watchers[i]].ws.send(JSON.stringify(
                {"type":"s2cBusStart","lineid":line.lineid}));
        }
    }
}

var mo = new AuthDbOpr("onBusLineDb",BusAuthSchema,"onBusLine");
mo.init();
module.exports = mo;

td();

function td(){
    mo.del({},function(e,cnt){console.log("del e="+e+",cnt="+cnt);});
}
function ta(){
    var lineid="testAddNewLineid";
    //mo.addnew({"lineid":lineid,"linestatus":"running","stationCnt":2});
    mo.getOne({"lineid":lineid},function(e,doc){
        console.log("get e=",e,",doc=",doc);
        doc.ststatus[0].speed=99;
        doc.save();
    });
}

